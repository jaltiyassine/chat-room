<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat Room</title>
    <link rel="stylesheet" href="/room-style.css">
</head>
<body>
    <div class="chat-container">
        <header class="chat-header">
            <h1>
                <svg class="chat-icon" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24" fill="currentColor" width="30px" height="30px">
                    <path d="M21.99 4c0-1.1-.89-2-1.99-2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14l4 4-.01-18zM18 14H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z"/>
                </svg>Â Chat
            </h1>
            <button id="theme-toggle" title="Toggle theme">
                <svg class="sun-icon" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24" fill="currentColor" width="22px" height="22px"></svg>
                    <path d="M12 7c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zM12 9c1.65 0 3 1.35 3 3s-1.35 3-3 3-3-1.35-3-3 1.35-3 3-3zm0-7c-.55 0-1 .45-1 1v2c0 .55.45 1 1 1s1-.45 1-1V3c0-.55-.45-1-1-1zm0 18c-.55 0-1 .45-1 1v2c0 .55.45 1 1 1s1-.45 1-1v-2c0-.55-.45-1-1-1zm-7-11H3c-.55 0-1 .45-1 1s.45 1 1 1h2c.55 0 1-.45 1-1s-.45-1-1-1zm18 0h-2c-.55 0-1 .45-1 1s.45 1 1 1h2c.55 0 1-.45 1-1s-.45-1-1-1zM5.64 5.64c-.39-.39-1.02-.39-1.41 0s-.39 1.02 0 1.41l1.41 1.41c.39.39 1.02.39 1.41 0s.39-1.02 0-1.41L5.64 5.64zm12.72 12.72c-.39-.39-1.02-.39-1.41 0s-.39 1.02 0 1.41l1.41 1.41c.39.39 1.02.39 1.41 0s.39-1.02 0-1.41l-1.41-1.41zM5.64 18.36c.39-.39.39-1.02 0-1.41s-1.02-.39-1.41 0l-1.41 1.41c-.39.39-.39 1.02 0 1.41s1.02.39 1.41 0l1.41-1.41zm12.72-12.72c.39-.39.39-1.02 0-1.41s-1.02-.39-1.41 0l-1.41 1.41c-.39.39-.39 1.02 0 1.41s1.02.39 1.41 0l1.41-1.41z"/>
                </svg>
                <svg class="moon-icon" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24" fill="currentColor" width="22px" height="22px" style="display:none;">
                    <path d="M12 3c-4.97 0-9 4.03-9 9s4.03 9 9 9c.83 0 1.5-.67 1.5-1.5 0-.39-.15-.74-.39-1.01-.23-.26-.38-.61-.38-.99 0-.83.67-1.5 1.5-1.5H16c2.76 0 5-2.24 5-5 0-4.42-4.03-8-9-8zm-5.5 9c0-3.03 2.47-5.5 5.5-5.5.52 0 .98.09 1.42.24-2.13.93-3.62 3.02-3.62 5.5 0 2.76 2.24 5 5 5 .03 0 .05 0 .08 0-2.2-.9-3.87-3.13-3.87-5.74z"/>
                </svg>
            </button>
        </header>
        <main class="chat-main">
            <div id="chat-messages" class="chat-messages">
            </div>
        </main>
        <div id="typing-indicator" class="typing-indicator"></div>
        <footer class="chat-form-container">
            <form id="chat-form" class="chat-form">
                <input
                    id="username"
                    type="text"
                    placeholder="Enter your name..."
                    required
                    autocomplete="username"
                />
                <input
                    id="msg"
                    type="text"
                    placeholder="Enter Message"
                    required
                    autocomplete="off"
                />
                <button type="submit" class="btn">
                    <span>Send</span>
                    <svg class="send-icon" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24" fill="currentColor" width="18px" height="18px">
                        <path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"/>
                    </svg>
                </button>
            </form>
        </footer>
    </div>

    <script>
        const chatForm = document.getElementById('chat-form');
        const chatMessages = document.getElementById('chat-messages');
        const msgInput = document.getElementById('msg');
        const usernameInput = document.getElementById('username');
        const chatMain = document.querySelector('.chat-main');
        const typingIndicator = document.getElementById('typing-indicator');
        let username = `User${Math.floor(Math.random() * 1000)}`;
        let usernameLocked = false;

        const protocol = window.location.protocol === 'https:' ? 'wss' : 'ws';
        let socket;

        let amITyping = false;
        let stopTypingTimer;
        const TYPING_TIMER_LENGTH = 2000;
        const currentlyTypingUsers = new Set();

        let heartbeatInterval;
        const CLIENT_HEARTBEAT_INTERVAL = 25000;

        let unreadMessagesCount = 0;
        const originalTitle = document.title;

        function updateTitleWithUnreadCount() {
            if (unreadMessagesCount > 0) {
                document.title = `(${unreadMessagesCount}) ${originalTitle}`;
            } else {
                document.title = originalTitle;
            }
        }

        window.addEventListener('focus', () => {
            if (unreadMessagesCount > 0) {
                unreadMessagesCount = 0;
                updateTitleWithUnreadCount();
            }
        });

        function sanitizeHTMLForDisplay(str) {
            if (typeof str !== 'string') {
                return str === null || str === undefined ? '' : String(str);
            }
            const temp = document.createElement('div');
            temp.textContent = str;
            return temp.innerHTML;
        }

        const decodeHTMLEntities = (encodedString) => {
            if (typeof encodedString !== 'string') return '';
            const temp = document.createElement('textarea');
            temp.innerHTML = encodedString;
            return temp.value;
        };

        function connectWebSocket() {
            if (socket && (socket.readyState === WebSocket.OPEN || socket.readyState === WebSocket.CONNECTING)) {
                return;
            }

            socket = new WebSocket(`${protocol}://${window.location.host}/room/ws`);

            socket.onopen = () => {
                console.log("WebSocket connection established");
                outputMessage({ type: 'system', text: 'Connected to chat!' });
                if (usernameLocked && username) {
                }
                startHeartbeat();
            };

            socket.onmessage = event => {
                try {
                    const messageData = JSON.parse(event.data);

                    if (messageData.type === '__pong__') {
                        return;
                    }

                    if (messageData.type === 'user_typing') {
                        if (messageData.user !== username) {
                            currentlyTypingUsers.add(messageData.user);
                            updateTypingIndicator();
                        }
                    } else if (messageData.type === 'user_stopped_typing') {
                        currentlyTypingUsers.delete(messageData.user);
                        updateTypingIndicator();
                    } else {
                        if (messageData.user) {
                            currentlyTypingUsers.delete(messageData.user);
                            updateTypingIndicator();
                        }
                        outputMessage(messageData);

                        if (messageData.type === 'chat' && messageData.user !== username && !document.hasFocus()) {
                            unreadMessagesCount++;
                            updateTitleWithUnreadCount();
                        }
                    }

                } catch (e) {
                    outputMessage({ type: 'system', user: 'System', text: event.data });
                }
                if (chatMain) {
                    chatMain.scrollTop = chatMain.scrollHeight;
                }
            };

            socket.onerror = error => {
                console.error("WebSocket Error:", error);
                outputMessage({ type: 'error', text: 'Connection error. Trying to reconnect...'});
            };

            socket.onclose = (event) => {
                console.log("WebSocket connection closed. Reason:", event.code, event.reason);
                outputMessage({ type: 'system', text: 'Disconnected. Attempting to reconnect in 5 seconds...' });
                currentlyTypingUsers.clear();
                updateTypingIndicator();
                stopHeartbeat();
                setTimeout(connectWebSocket, 5000);
            };
        }

        function startHeartbeat() {
            stopHeartbeat();
            heartbeatInterval = setInterval(() => {
                if (socket && socket.readyState === WebSocket.OPEN) {
                }
            }, CLIENT_HEARTBEAT_INTERVAL);
        }

        function stopHeartbeat() {
            if (heartbeatInterval) {
                clearInterval(heartbeatInterval);
                heartbeatInterval = null;
            }
        }

        connectWebSocket();

        usernameInput.addEventListener('input', (e) => {
            if (usernameLocked) return;
            const newUsername = e.target.value.trim() || `User${Math.floor(Math.random() * 1000)}`;
            if (newUsername !== username && amITyping) {
                 if(socket && socket.readyState === WebSocket.OPEN) socket.send(JSON.stringify({ type: 'stop_typing', user: username }));
                 amITyping = false;
                 clearTimeout(stopTypingTimer);
            }
            username = newUsername;
        });
        usernameInput.value = username;

        msgInput.addEventListener('input', () => {
            if (!username.trim() || !socket || socket.readyState !== WebSocket.OPEN) return;

            if (!amITyping) {
                socket.send(JSON.stringify({ type: 'start_typing', user: username }));
                amITyping = true;
            }
            clearTimeout(stopTypingTimer);
            stopTypingTimer = setTimeout(() => {
                if (amITyping) {
                    if(socket && socket.readyState === WebSocket.OPEN) socket.send(JSON.stringify({ type: 'stop_typing', user: username }));
                    amITyping = false;
                }
            }, TYPING_TIMER_LENGTH);
        });

        chatForm.addEventListener('submit', e => {
            e.preventDefault();
            if (!socket || socket.readyState !== WebSocket.OPEN) {
                outputMessage({ type: 'error', text: 'Not connected. Please wait or refresh.' });
                return;
            }
            let msgText = msgInput.value.trim();

            if (!msgText) return false;
            if (!username.trim()) {
                alert("Please enter a username.");
                if (!usernameLocked) usernameInput.focus();
                return false;
            }

            clearTimeout(stopTypingTimer);
            if (amITyping) {
                socket.send(JSON.stringify({ type: 'stop_typing', user: username }));
                amITyping = false;
            }

            const messagePayload = {
                type: 'chat',
                user: username,
                text: msgText,
                timestamp: new Date().toISOString()
            };
            socket.send(JSON.stringify(messagePayload));

            if (!usernameLocked) {
                usernameInput.disabled = true;
                usernameLocked = true;
            }

            msgInput.value = '';
            msgInput.focus();
        });

        function parseLinks(sanitizedText) {
            const urlRegex = /(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])|(\bwww\.[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig;

            return sanitizedText.replace(urlRegex, function(matchedUrlSegment) {
                let hrefAttribValue = matchedUrlSegment;
                if (!/^[a-zA-Z]+:\/\//i.test(hrefAttribValue)) {
                    hrefAttribValue = 'http://' + hrefAttribValue;
                }
                const decodedUrlForValidation = decodeHTMLEntities(hrefAttribValue);
                try {
                    const parsedUrl = new URL(decodedUrlForValidation);
                    if (!['http:', 'https:', 'ftp:', 'file:'].includes(parsedUrl.protocol.toLowerCase())) {
                        return matchedUrlSegment;
                    }
                } catch (err) {
                    return matchedUrlSegment;
                }
                return `<a href="${hrefAttribValue}" target="_blank" rel="noopener noreferrer" style="color:rgb(86.7, 173.655, 255)">${matchedUrlSegment}</a>`;
            });
        }

        function outputMessage(message) {
            const div = document.createElement('div');
            div.classList.add('message');
            const meta = document.createElement('p');
            meta.classList.add('meta');
            const textP = document.createElement('p');
            textP.classList.add('text');

            const sanitizedMessageText = sanitizeHTMLForDisplay(message.text);

            if (message.type === 'chat') {
                textP.innerHTML = parseLinks(sanitizedMessageText);
            } else {
                textP.innerHTML = sanitizedMessageText;
            }

            if (message.type === 'system' || message.type === 'error') {
                div.classList.add(message.type + '-message');
                meta.style.display = 'none';
            } else if (message.type === 'chat') {
                const sanitizedUser = sanitizeHTMLForDisplay(message.user || 'Anonymous');
                let displayTimestamp;

                if (message.timestamp) {
                    try {
                        const dateObj = new Date(message.timestamp);
                        displayTimestamp = dateObj.toLocaleTimeString([], {
                            hour: 'numeric',
                            minute: '2-digit',
                            hour12: true
                        });
                    } catch (e) {
                        console.error("Error parsing timestamp:", message.timestamp, e);
                        displayTimestamp = new Date().toLocaleTimeString([], {
                            hour: 'numeric', minute: '2-digit', hour12: true
                        });
                    }
                } else {
                    displayTimestamp = new Date().toLocaleTimeString([], {
                        hour: 'numeric', minute: '2-digit', hour12: true
                    });
                }
                const sanitizedTimestamp = sanitizeHTMLForDisplay(displayTimestamp);
                meta.innerHTML = `<span>${sanitizedUser}</span> <time>${sanitizedTimestamp}</time>`;

                if (message.user === username) {
                    div.classList.add('my-message');
                } else {
                    div.classList.add('other-message');
                }
            }
            div.appendChild(meta);
            div.appendChild(textP);
            chatMessages.appendChild(div);
            if (chatMain) {
                chatMain.scrollTop = chatMain.scrollHeight;
            }
        }

        function updateTypingIndicator() {
            if (currentlyTypingUsers.size === 0) {
                typingIndicator.textContent = '';
                typingIndicator.style.display = 'none';
                return;
            }

            typingIndicator.style.display = 'block';
            let users = Array.from(currentlyTypingUsers).map(u => sanitizeHTMLForDisplay(u));

            if (users.length === 1) {
                typingIndicator.textContent = `${users[0]} is typing...`;
            } else if (users.length === 2) {
                typingIndicator.textContent = `${users[0]} and ${users[1]} are typing...`;
            } else {
                typingIndicator.textContent = `${users.slice(0,2).join(', ')} and ${users.length - 2} other(s) are typing...`;
            }
            if (chatMain) {
                chatMain.scrollTop = chatMain.scrollHeight;
            }
        }

        const themeToggle = document.getElementById('theme-toggle');
        const sunIcon = themeToggle.querySelector('.sun-icon');
        const moonIcon = themeToggle.querySelector('.moon-icon');
        const body = document.body;

        function setLightTheme() {
            body.classList.remove('dark-mode');
            sunIcon.style.display = 'block';
            moonIcon.style.display = 'none';
            localStorage.setItem('theme', 'light');
        }

        function setDarkTheme() {
            body.classList.add('dark-mode');
            sunIcon.style.display = 'none';
            moonIcon.style.display = 'block';
            localStorage.setItem('theme', 'dark');
        }

        themeToggle.addEventListener('click', () => {
            if (body.classList.contains('dark-mode')) {
                setLightTheme();
            } else {
                setDarkTheme();
            }
        });

        const prefersDarkScheme = window.matchMedia("(prefers-color-scheme: dark)");
        const currentTheme = localStorage.getItem("theme");

        if (currentTheme === "dark") {
            setDarkTheme();
        } else if (currentTheme === "light") {
            setLightTheme();
        } else if (prefersDarkScheme.matches) {
            setDarkTheme();
        } else {
            setLightTheme();
        }
    </script>
</body>
</html>
